{"ast":null,"code":"var _jsxFileName = \"/Users/moldyr/Desktop/handling inputForms/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport useInput from '../hooks/use-input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameInputChangeHandler,\n    inputBlurHandler: nameInputBlurHandler,\n    isValid: enteredNameIsValid\n  } = useInput(value => value.trim() !== \"\");\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  const enteredEmailIsValid = enteredEmail.trim() !== '';\n  const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n  const emailInputChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n  };\n\n  const emailInputBlurHandler = () => {\n    setEnteredEmailTouched(true);\n  };\n\n  const formSubmitHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n    setEnteredEmailTouched(true);\n\n    if (!enteredNameIsValid && !enteredEmailIsValid) {\n      return;\n    }\n\n    console.log(enteredName);\n    setEnteredName(\"\");\n    setEnteredNameTouched(false);\n    setEnteredEmail(\"\");\n    setEnteredEmailTouched(false);\n  };\n\n  const nameInputClasses = nameInputIsInvalid && emailInputIsInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        value: enteredName,\n        onBlur: nameInputBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: emailInputChangeHandler,\n        value: enteredEmail,\n        onBlur: emailInputBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && emailInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 55\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"+3iu1x8pXnUfVWi5jCEIkee+ZlU=\", false, function () {\n  return [useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/Users/moldyr/Desktop/handling inputForms/src/components/SimpleInput.js"],"names":["useState","useInput","SimpleInput","props","value","enteredName","hasError","nameInputHasError","valueChangeHandler","nameInputChangeHandler","inputBlurHandler","nameInputBlurHandler","isValid","enteredNameIsValid","trim","enteredEmail","setEnteredEmail","enteredEmailTouched","setEnteredEmailTouched","enteredEmailIsValid","emailInputIsInvalid","formIsValid","emailInputChangeHandler","event","target","emailInputBlurHandler","formSubmitHandler","preventDefault","setEnteredNameTouched","console","log","setEnteredName","nameInputClasses","nameInputIsInvalid"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport useInput from '../hooks/use-input'\n\nconst SimpleInput = (props) => {\n  const { value: enteredName,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameInputChangeHandler,\n    inputBlurHandler: nameInputBlurHandler,\n    isValid: enteredNameIsValid\n  } = useInput(value => value.trim() !== \"\");\n\n\n\n  const [enteredEmail, setEnteredEmail] = useState(\"\")\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n\n  const enteredEmailIsValid = enteredEmail.trim() !== '';\n  const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n  let formIsValid = false;\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n\n\n  const emailInputChangeHandler = (event) => {\n    setEnteredEmail(event.target.value);\n  }\n\n  const emailInputBlurHandler = () => {\n    setEnteredEmailTouched(true);\n  }\n\n\n\n  const formSubmitHandler = (event) => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n    setEnteredEmailTouched(true)\n\n    if (!enteredNameIsValid && !enteredEmailIsValid) {\n      return\n    }\n    console.log(enteredName)\n    setEnteredName(\"\");\n    setEnteredNameTouched(false);\n    setEnteredEmail(\"\");\n    setEnteredEmailTouched(false);\n  }\n\n\n  const nameInputClasses = nameInputIsInvalid && emailInputIsInvalid ? 'form-control invalid' : 'form-control'\n\n  return (\n    <form onSubmit={formSubmitHandler} >\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input type='text' id='name' onChange={nameInputChangeHandler} value={enteredName}\n          onBlur={nameInputBlurHandler} />\n        <label htmlFor='email'>Your Email</label>\n        <input type='email' id='email' onChange={emailInputChangeHandler} value={enteredEmail}\n          onBlur={emailInputBlurHandler} />\n        {nameInputIsInvalid && emailInputIsInvalid && <p className='error-text'>Name must not be empty</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form >\n  );\n};\n\nexport default SimpleInput;\n\n"]},"metadata":{},"sourceType":"module"}