{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\n\nfunction useInput(validatedValue) {\n  _s();\n\n  const [enteredValue, setEnteredValue] = useState('');\n  const [isTouched, setIsTouched] = useState(false);\n  const valueIsValid = validatedValue(enteredValue);\n  const hasError = !valueIsValid && isTouched;\n\n  const valueChangeHandler = event => {\n    setEnteredValue(event.target.value);\n  };\n\n  const inputBlurHandler = event => {\n    setIsTouched(true);\n  };\n\n  const reset = () => {\n    setEnteredValue('');\n    setIsTouched(false);\n  };\n\n  return {\n    value: enteredValue,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    isValid: valueIsValid\n  };\n}\n\n_s(useInput, \"uN9KnldpqRIT2LwByiGz+Mp8wEw=\");\n\nexport default useInput;","map":{"version":3,"sources":["/Users/moldyr/Desktop/handling inputForms/src/hooks/use-input.js"],"names":["useState","useInput","validatedValue","enteredValue","setEnteredValue","isTouched","setIsTouched","valueIsValid","hasError","valueChangeHandler","event","target","value","inputBlurHandler","reset","isValid"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,SAASC,QAAT,CAAkBC,cAAlB,EAAkC;AAAA;;AAE9B,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAMO,YAAY,GAAGL,cAAc,CAACC,YAAD,CAAnC;AACA,QAAMK,QAAQ,GAAG,CAACD,YAAD,IAAiBF,SAAlC;;AAGA,QAAMI,kBAAkB,GAAIC,KAAD,IAAW;AAClCN,IAAAA,eAAe,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;AACH,GAFD;;AAIA,QAAMC,gBAAgB,GAAIH,KAAD,IAAW;AAChCJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,GAFD;;AAIA,QAAMQ,KAAK,GAAG,MAAM;AAChBV,IAAAA,eAAe,CAAC,EAAD,CAAf;AACAE,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,GAHD;;AAKA,SAAO;AACHM,IAAAA,KAAK,EAAET,YADJ;AACkBK,IAAAA,QADlB;AAC4BC,IAAAA,kBAD5B;AACgDI,IAAAA,gBADhD;AACkEE,IAAAA,OAAO,EAAER;AAD3E,GAAP;AAGH;;GAzBQN,Q;;AA2BT,eAAeA,QAAf","sourcesContent":["import { useState } from 'react'\n\nfunction useInput(validatedValue) {\n\n    const [enteredValue, setEnteredValue] = useState('');\n    const [isTouched, setIsTouched] = useState(false);\n\n    const valueIsValid = validatedValue(enteredValue);\n    const hasError = !valueIsValid && isTouched;\n\n\n    const valueChangeHandler = (event) => {\n        setEnteredValue(event.target.value);\n    }\n\n    const inputBlurHandler = (event) => {\n        setIsTouched(true);\n    }\n\n    const reset = () => {\n        setEnteredValue('');\n        setIsTouched(false);\n    }\n\n    return {\n        value: enteredValue, hasError, valueChangeHandler, inputBlurHandler, isValid: valueIsValid\n    }\n}\n\nexport default useInput\n"]},"metadata":{},"sourceType":"module"}