{"ast":null,"code":"var _jsxFileName = \"/Users/moldyr/Desktop/handling inputForms/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport useInput from '../hooks/use-input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameInputChangeHandler,\n    inputBlurHandler: nameInputBlurHandler,\n    isValid: enteredNameIsValid,\n    reset: resetNameInput\n  } = useInput(value => value.trim() !== \"\");\n  const {\n    value: enteredEmail,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailInputChangeHandler,\n    inputBlurHandler: emailInputBlurHandler,\n    isValid: enteredEmailIsValid,\n    reset: resetEmailInput\n  } = useInput(value => value.includes('@'));\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n  const formSubmitHandler = event => {\n    event.preventDefault();\n    resetNameInput();\n    resetEmailInput();\n\n    if (!enteredNameIsValid && !enteredEmailIsValid) {\n      return;\n    }\n\n    console.log(enteredName);\n  };\n\n  const nameInputClasses = nameInputHasError && emailInputHasError ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        value: enteredName,\n        onBlur: nameInputBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: emailInputChangeHandler,\n        value: enteredEmail,\n        onBlur: emailInputBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), nameInputHasError && emailInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 53\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"oiPy5WH/T2c6lCI9G0kSoMzLNgo=\", false, function () {\n  return [useInput, useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/Users/moldyr/Desktop/handling inputForms/src/components/SimpleInput.js"],"names":["useInput","SimpleInput","props","value","enteredName","hasError","nameInputHasError","valueChangeHandler","nameInputChangeHandler","inputBlurHandler","nameInputBlurHandler","isValid","enteredNameIsValid","reset","resetNameInput","trim","enteredEmail","emailInputHasError","emailInputChangeHandler","emailInputBlurHandler","enteredEmailIsValid","resetEmailInput","includes","formIsValid","formSubmitHandler","event","preventDefault","console","log","nameInputClasses"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,oBAArB;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAM;AAAEC,IAAAA,KAAK,EAAEC,WAAT;AACJC,IAAAA,QAAQ,EAAEC,iBADN;AAEJC,IAAAA,kBAAkB,EAAEC,sBAFhB;AAGJC,IAAAA,gBAAgB,EAAEC,oBAHd;AAIJC,IAAAA,OAAO,EAAEC,kBAJL;AAKJC,IAAAA,KAAK,EAAEC;AALH,MAMFd,QAAQ,CAACG,KAAK,IAAIA,KAAK,CAACY,IAAN,OAAiB,EAA3B,CANZ;AASA,QAAM;AAAEZ,IAAAA,KAAK,EAAEa,YAAT;AACJX,IAAAA,QAAQ,EAAEY,kBADN;AAEJV,IAAAA,kBAAkB,EAAEW,uBAFhB;AAGJT,IAAAA,gBAAgB,EAAEU,qBAHd;AAIJR,IAAAA,OAAO,EAAES,mBAJL;AAKJP,IAAAA,KAAK,EAAEQ;AALH,MAMFrB,QAAQ,CAACG,KAAK,IAAIA,KAAK,CAACmB,QAAN,CAAe,GAAf,CAAV,CANZ;AASA,MAAIC,WAAW,GAAG,KAAlB;;AACA,MAAIX,kBAAkB,IAAIQ,mBAA1B,EAA+C;AAC7CG,IAAAA,WAAW,GAAG,IAAd;AACD;;AAID,QAAMC,iBAAiB,GAAIC,KAAD,IAAW;AACnCA,IAAAA,KAAK,CAACC,cAAN;AAEAZ,IAAAA,cAAc;AACdO,IAAAA,eAAe;;AAEf,QAAI,CAACT,kBAAD,IAAuB,CAACQ,mBAA5B,EAAiD;AAC/C;AACD;;AACDO,IAAAA,OAAO,CAACC,GAAR,CAAYxB,WAAZ;AACD,GAVD;;AAaA,QAAMyB,gBAAgB,GAAGvB,iBAAiB,IAAIW,kBAArB,GAA0C,sBAA1C,GAAmE,cAA5F;AAEA,sBACE;AAAM,IAAA,QAAQ,EAAEO,iBAAhB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEK,gBAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,EAAE,EAAC,MAAtB;AAA6B,QAAA,QAAQ,EAAErB,sBAAvC;AAA+D,QAAA,KAAK,EAAEJ,WAAtE;AACE,QAAA,MAAM,EAAEM;AADV;AAAA;AAAA;AAAA;AAAA,cAFF,eAIE;AAAO,QAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,EAAE,EAAC,OAAvB;AAA+B,QAAA,QAAQ,EAAEQ,uBAAzC;AAAkE,QAAA,KAAK,EAAEF,YAAzE;AACE,QAAA,MAAM,EAAEG;AADV;AAAA;AAAA;AAAA;AAAA,cALF,EAOGb,iBAAiB,IAAIW,kBAArB,iBAA2C;AAAG,QAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAP9C;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAUE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE;AAAQ,QAAA,QAAQ,EAAE,CAACM,WAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CAzDD;;GAAMtB,W;UAOAD,Q,EASAA,Q;;;KAhBAC,W;AA2DN,eAAeA,WAAf","sourcesContent":["import useInput from '../hooks/use-input'\n\nconst SimpleInput = (props) => {\n  const { value: enteredName,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameInputChangeHandler,\n    inputBlurHandler: nameInputBlurHandler,\n    isValid: enteredNameIsValid,\n    reset: resetNameInput\n  } = useInput(value => value.trim() !== \"\");\n\n\n  const { value: enteredEmail,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailInputChangeHandler,\n    inputBlurHandler: emailInputBlurHandler,\n    isValid: enteredEmailIsValid,\n    reset: resetEmailInput\n  } = useInput(value => value.includes('@'));\n\n\n  let formIsValid = false;\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n\n\n  const formSubmitHandler = (event) => {\n    event.preventDefault();\n\n    resetNameInput();\n    resetEmailInput();\n\n    if (!enteredNameIsValid && !enteredEmailIsValid) {\n      return\n    }\n    console.log(enteredName)\n  }\n\n\n  const nameInputClasses = nameInputHasError && emailInputHasError ? 'form-control invalid' : 'form-control'\n\n  return (\n    <form onSubmit={formSubmitHandler} >\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input type='text' id='name' onChange={nameInputChangeHandler} value={enteredName}\n          onBlur={nameInputBlurHandler} />\n        <label htmlFor='email'>Your Email</label>\n        <input type='email' id='email' onChange={emailInputChangeHandler} value={enteredEmail}\n          onBlur={emailInputBlurHandler} />\n        {nameInputHasError && emailInputHasError && <p className='error-text'>Name must not be empty</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form >\n  );\n};\n\nexport default SimpleInput;\n\n"]},"metadata":{},"sourceType":"module"}